name: Milestone Assessement
on: [push]
env:
  TEST_SUITES_URL: https://github.com/Estia-advanced-programming/pandora-public/raw/master/testSuites
  PANDORA_REF_URL: https://github.com/Estia-advanced-programming/pandora-public/releases/download/beta/pandora.jar

jobs:
  maven_build:
    name: Maven build
    runs-on: ubuntu-latest
    steps:
      - name: checkout your code
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - run: mkdir -p staging/lib && cp target/*.jar staging  && cp target/lib/*.jar staging/lib
      - uses: actions/upload-artifact@v1
        with:
          name: target
          path: staging
  milestones:
    name:  ${{ format( 'milestone{0}', matrix.milestone ) }}
    needs: maven_build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        milestone: [ 1, 2, 3, 4, 5, 6, 7, 8 ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup student pandora.jar
        uses: actions/download-artifact@v1
        with:
          name: target

      - name: Downloading reference pandora
        run:  wget $PANDORA_REF_URL -O target/referencePandora.jar

      - name: download test suite
        run: |
          wget $TEST_SUITES_URL/milestone${{ matrix.milestone }}.zip -O testSuite.zip
          unzip testSuite.zip -d testSuite

      - name: create report directory
        run: mkdir -p report

      - uses: Estia-advanced-programming/autograding@estia
        id: milestone
        with:
          title: milestone${{ matrix.milestone}}
          testSuite: './testSuite/milestone${{ matrix.milestone}}.json'

      - name: update report
        if: failure()
        run: echo ${{ format( 'milestone{0}', matrix.milestone ) }} 0/0 >> report/report.txt
      - name: update report
        if: success()
        run: echo ${{ format( 'milestone{0}', matrix.milestone ) }} ${{ steps.milestone.outputs.Points }} >> report/report.txt
      - name: upload report
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: report-milestone${{matrix.milestone}}
          path: report

  Autograding:
    name: Autograding
    needs: milestones
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: report-milestone1
      - uses: actions/download-artifact@v1
        with:
          name: report-milestone2
      - uses: actions/download-artifact@v1
        with:
          name: report-milestone3
      - uses: actions/download-artifact@v1
        with:
          name: report-milestone4
      - uses: actions/download-artifact@v1
        with:
          name: report-milestone5
      - uses: actions/download-artifact@v1
        with:
          name: report-milestone6
      - uses: actions/download-artifact@v1
        with:
          name: report-milestone7
      - uses: actions/download-artifact@v1
        with:
          name: report-milestone8
      - run: cat report-milestone*/report.txt > finalReport
      - uses: actions/github-script@0.8.0
        with:
          script: |
            github.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{github.run_id}},
              output: {
                title: "Autograding",
                summary: "20/20",
                text: "20/20",
                annotations: [
                  {
                    path: '.github',
                    start_line: 1,
                    end_line: 1,
                    annotation_level: 'notice',
                    message: "20/20",
                    title: 'Autograding complete',
                  },
                ],
              }})
